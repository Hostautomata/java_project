package com.ict03.class01;

import java.util.Scanner;

public class Ex01 {
	public static void main(String[] args) {
		//클래스 : 객체를 만들기 위한 모든 정보를 가지고 있는 것.(거푸집, 설계도와 비교)
		//파일 형태라면 클래스를 객체로 만들어야 사용이 가능하다.
		//클래스는 데이터, 기능, 생성자를 가지고있다.
		//메서드 = 기능
		//생성자 = 클래스를 객체로 만들 때 호출됨.
		//데이터 = 변수와 상수
		//생성자는 클래스 이름과 같다. 클래스 이름이 저장이름이다.
		//생성자 클래스이름()
		// 생성자의 목적은 맴버필드(데이터)의 초기화
		//	클래스의 구조 : 헤더, 맴버필드, 맴버메서드,
		
		//1. 헤더 : [접근제한자] [클래스종류] class 클래스이름
		// 접근제한자:  
		//	1)public	: 누구나 다 접근 가능
		//	2)protected : 같은 패키지나 상속관계인 상태에서는 접근이 가능하다.
		//	3)생략		: 같은 패키지에서 접근가능
		//	4)private	: 외부에서 무조건 접근불가
		
		//클래스 종류 	: 일반적인 클래스는 아무것도 표시되지 않는다.
		// 				  특정 클래스의 경우 해당 예약어를 사용(final, abstract)
		//class : 클래스 임을 나타내는 예약어

		//클래스이름 : 저장이름 = 생성자 
		// 첫 글자가 대문자이며 카멜표기법을 사용한다.
		//
		//2. 맴버필드(변수와 상수) : 상태값, 데이터, 속성, 특징
		// - 변수 : 언제든지 변할 수 있는 데이터를 저장하는 공간
		//		 : 첫글자, 소문자, 두 단어 이상일 때 단어들의 첫글자는 대문자
		// - 상수 : 한번 저장하면 변경 할 수 없는 데이터를 저장하는 공간
		//		   모든 글자가 대문자.단어와 단어 사이에 _를 사용할 수 있다. final
		// 
		//3. 맴버메서드 : 동작, 기능, 작동하는 것
		//				메서드 이름 뒤에 무조건 ()가 존재한다.
		//				해당 메서드를 호출하면 해당 메서드가 실행된다.
		//				실행이 끝난 메서드는 자기를 호출한 곳으로 되돌아간다.
		//				main()은 JVM이 호출한다. main()이 끝나면 JVM으로 돌아가면 종료된다.
		//
		// -메서드 구성 : [접근제한자] [메서드 종류] [반환형] 메서드이름(인자 = 매개변수){샐행 내용;}
		// 	1)접근제한자	: 	클래스와 동일
		//					public > protected > default > private
		//  2)메서드 종류	:	instance 메서드와 static 메서드로 나뉨
//							instance 메서드가 일반 메소드로 이 부분을 생략한다.
//							static 메서드는 static예약어를 반드시 써줘야 한다.
//			3)**반환형	:	메서드는 자기를 호출한 곳으로 되돌아간다. 이때 반환하는 값의 자료형을 설정해주는 부분
//							만약 결과를 반환하지 않을 때는 반환형에 void라고 적는다.
//							예) public static void main(String[] args){}
//							누구나 다 접근 static메서드 결과를 반환하지 않는 main이라는 이름의 메서드(){}
//			4)인자		:	메서드가 동작 할 때 필요한 정보를 외부에서 받아 사용할 때 인자가 필요하다.		
//				*Overloading : 같은 클래스 안에서 메서드 이름은 같고 인자의 갯수나 인자의 자료형이 다른 메서드를 말한다.		
//			5)	getter() / setter()
//				getter()	: 호출하는 입장에서 메서드를 이용해서 맴버필드의 데이터를 얻어낼 수 있다.
//				setter()	: 호출하는 입장에서 메서드를 이용해서 맴버필드의 데이터를 설정할 수 있다.

//		 4. 생성자	: 클래스를 객체로 만들 때 한 번 호출되는 것
//				-목적 : 맴버필드(변수와 상수)의 초기 값을 지정하는 것이 목적이다.
//				-형식 : 클래스이름과 생성자는 같다.(클래스이름()) 반환형이 없는 메서드와 같다.
		
//		Scanner	sc = new Scanner(System.in);
//		클래스 참조변수 = 인스턴스 생성자(); 
//		참조변수를 이용해서 객체가 가지고 있는 맴버필드나 맴버메서드를 사용할 수 있다.
//		객체를 만들기 위해서는 생성자를 호출해야 하지만
//		반드시 해당 클래스가 가지고있는 생성자만 호출이 가능하다.
//		모든 클래스는 반드시 생성자를 가지고 있다.(인터페이스 제외)
//		생성자가 보이지 않는 클래스는 기본생성자로 객체를 생성한다. 기본생성자란 인자가 없는 생성자를 의미함.
//		만들어진 객체 안에 존재하는 맴버필드나 맴버메서드를 사용 방법
//		참조변수.맴버필드, 참조변수.맴버메서드
//		예) Scanner sc = new Scanner(System.in);
//			이때 sc는 참조변수
//			sc.next(), sc.nextInt();
//		생성자도 오버로딩이 가능하다.
//		하나의 클래스 안에 여러 생성자가 존재 할 수 있음.
//		
//	맴버메서드와 맴버 필드는 크게 두 종류가 있다.
//	instance 메서드,instance필드    static메서드, static필드
//	**클래스에는 일반적으로 static을 사용할 수 없다.(내부 클래스는 예외)
//	instance : 일반적인 메서드나 필드를 의미함. 객체가 생성될 때 같이 생성 되는 메서드나 필드
//		호출 방법 	: 객체를 만들 때 참조변수를 사용하는데 해당 참조변수.메서드, 참조변수를.필드
//	static :  static이 붙어있는 메서드나 필드. 객체생성과 관련없이 미리 만들어진 메서드나 필드
//		호출 방법 : 클래스이름.메서드, 클래스이름.필드
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	}
}
